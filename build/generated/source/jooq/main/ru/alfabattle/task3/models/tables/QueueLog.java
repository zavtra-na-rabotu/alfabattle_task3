/*
 * This file is generated by jOOQ.
 */
package ru.alfabattle.task3.models.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.alfabattle.task3.models.Keys;
import ru.alfabattle.task3.models.Public;
import ru.alfabattle.task3.models.tables.records.QueueLogRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueueLog extends TableImpl<QueueLogRecord> {

    private static final long serialVersionUID = -539020489;

    /**
     * The reference instance of <code>public.queue_log</code>
     */
    public static final QueueLog QUEUE_LOG = new QueueLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueueLogRecord> getRecordType() {
        return QueueLogRecord.class;
    }

    /**
     * The column <code>public.queue_log.data</code>. Дата взятия талона
     */
    public final TableField<QueueLogRecord, LocalDate> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.LOCALDATE, this, "Дата взятия талона");

    /**
     * The column <code>public.queue_log.start_time_of_wait</code>. Время начала ожидания
     */
    public final TableField<QueueLogRecord, LocalTime> START_TIME_OF_WAIT = createField(DSL.name("start_time_of_wait"), org.jooq.impl.SQLDataType.LOCALTIME, this, "Время начала ожидания");

    /**
     * The column <code>public.queue_log.end_time_of_wait</code>. Время окончания ожидания
     */
    public final TableField<QueueLogRecord, LocalTime> END_TIME_OF_WAIT = createField(DSL.name("end_time_of_wait"), org.jooq.impl.SQLDataType.LOCALTIME, this, "Время окончания ожидания");

    /**
     * The column <code>public.queue_log.end_time_of_service</code>. Время окончания обслуживания
     */
    public final TableField<QueueLogRecord, LocalTime> END_TIME_OF_SERVICE = createField(DSL.name("end_time_of_service"), org.jooq.impl.SQLDataType.LOCALTIME, this, "Время окончания обслуживания");

    /**
     * The column <code>public.queue_log.branches_id</code>. Код отделения
     */
    public final TableField<QueueLogRecord, Integer> BRANCHES_ID = createField(DSL.name("branches_id"), org.jooq.impl.SQLDataType.INTEGER, this, "Код отделения");

    /**
     * The column <code>public.queue_log.id</code>.
     */
    public final TableField<QueueLogRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('queue_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.queue_log</code> table reference
     */
    public QueueLog() {
        this(DSL.name("queue_log"), null);
    }

    /**
     * Create an aliased <code>public.queue_log</code> table reference
     */
    public QueueLog(String alias) {
        this(DSL.name(alias), QUEUE_LOG);
    }

    /**
     * Create an aliased <code>public.queue_log</code> table reference
     */
    public QueueLog(Name alias) {
        this(alias, QUEUE_LOG);
    }

    private QueueLog(Name alias, Table<QueueLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private QueueLog(Name alias, Table<QueueLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> QueueLog(Table<O> child, ForeignKey<O, QueueLogRecord> key) {
        super(child, key, QUEUE_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<QueueLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUEUE_LOG;
    }

    @Override
    public UniqueKey<QueueLogRecord> getPrimaryKey() {
        return Keys.QUEUE_LOG_PK;
    }

    @Override
    public List<UniqueKey<QueueLogRecord>> getKeys() {
        return Arrays.<UniqueKey<QueueLogRecord>>asList(Keys.QUEUE_LOG_PK);
    }

    @Override
    public List<ForeignKey<QueueLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QueueLogRecord, ?>>asList(Keys.QUEUE_LOG__QUEUE_LOG_FK);
    }

    public Branches branches() {
        return new Branches(this, Keys.QUEUE_LOG__QUEUE_LOG_FK);
    }

    @Override
    public QueueLog as(String alias) {
        return new QueueLog(DSL.name(alias), this);
    }

    @Override
    public QueueLog as(Name alias) {
        return new QueueLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueLog rename(String name) {
        return new QueueLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueLog rename(Name name) {
        return new QueueLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDate, LocalTime, LocalTime, LocalTime, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
