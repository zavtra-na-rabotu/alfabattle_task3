/*
 * This file is generated by jOOQ.
 */
package ru.alfabattle.task3.models.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.alfabattle.task3.models.Keys;
import ru.alfabattle.task3.models.Public;
import ru.alfabattle.task3.models.tables.records.BranchesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Branches extends TableImpl<BranchesRecord> {

    private static final long serialVersionUID = -489108814;

    /**
     * The reference instance of <code>public.branches</code>
     */
    public static final Branches BRANCHES = new Branches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BranchesRecord> getRecordType() {
        return BranchesRecord.class;
    }

    /**
     * The column <code>public.branches.id</code>. Номер офиса
     */
    public final TableField<BranchesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Номер офиса");

    /**
     * The column <code>public.branches.title</code>. Удобное имя для поиска
     */
    public final TableField<BranchesRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR, this, "Удобное имя для поиска");

    /**
     * The column <code>public.branches.lon</code>. Долгота
     */
    public final TableField<BranchesRecord, BigDecimal> LON = createField(DSL.name("lon"), org.jooq.impl.SQLDataType.NUMERIC, this, "Долгота");

    /**
     * The column <code>public.branches.lat</code>. Широта
     */
    public final TableField<BranchesRecord, BigDecimal> LAT = createField(DSL.name("lat"), org.jooq.impl.SQLDataType.NUMERIC, this, "Широта");

    /**
     * The column <code>public.branches.address</code>. Адрес
     */
    public final TableField<BranchesRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR, this, "Адрес");

    /**
     * Create a <code>public.branches</code> table reference
     */
    public Branches() {
        this(DSL.name("branches"), null);
    }

    /**
     * Create an aliased <code>public.branches</code> table reference
     */
    public Branches(String alias) {
        this(DSL.name(alias), BRANCHES);
    }

    /**
     * Create an aliased <code>public.branches</code> table reference
     */
    public Branches(Name alias) {
        this(alias, BRANCHES);
    }

    private Branches(Name alias, Table<BranchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Branches(Name alias, Table<BranchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Branches(Table<O> child, ForeignKey<O, BranchesRecord> key) {
        super(child, key, BRANCHES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BranchesRecord> getPrimaryKey() {
        return Keys.BRANCHES_PK;
    }

    @Override
    public List<UniqueKey<BranchesRecord>> getKeys() {
        return Arrays.<UniqueKey<BranchesRecord>>asList(Keys.BRANCHES_PK);
    }

    @Override
    public Branches as(String alias) {
        return new Branches(DSL.name(alias), this);
    }

    @Override
    public Branches as(Name alias) {
        return new Branches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Branches rename(String name) {
        return new Branches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Branches rename(Name name) {
        return new Branches(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, BigDecimal, BigDecimal, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
